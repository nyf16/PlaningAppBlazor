@page "/plans/details/{id}"

@inject PlansService plansService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager

@attribute [Authorize]

<h3>Plan @model.Title</h3>

<div class="row">
    <div class=" col-6">
        <EditForm Model="model" OnValidSubmit="async () => await editPlanAsync()">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>

                <RadzenTextBox Placeholder="Başlık" @bind-Value="model.Title" Style="margin:10px;"></RadzenTextBox>
                <Radzen.Blazor.RadzenTextArea Placeholder="Açıklama" @bind-Value="model.Description" Style="margin:10px;"></Radzen.Blazor.RadzenTextArea>
                <input type="file" style="margin:10px;" @ref="inputReference" @onchange="async() => await chooseFileAsync()" />
                <img style="width:100%;margin:10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" Style="margin:5px" class="btn btn-block" Text="Kaydet"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>

    <div class="col-6">
        <RadzenCard>
            <h2>Planın detayları</h2>
        </RadzenCard>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    // Alert
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    // Choose a cover photo for the plan
    async Task chooseFileAsync()
    {
        // Read the file
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        // Read the info of the file
        var fileInfo = await file.ReadFileInfoAsync();

        // Validate the extension
        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

        if (!allowedExtensions.Contains(extension))
        {
            message = "Seçilen dosya geçerli bir resim dosyası değil";
            messageType = Models.AlertMessageType.Error;
        }
        message = null;

        // Open the stream
        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            // Copy the content to a new stream
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;

            // Show the file in the UI
            imageContent = $"data:{fileInfo.Type};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task editPlanAsync()
    {
        isBusy = true;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.PostPlanAsync(model);

        if (result.IsSuccess)
        {
            message = "Plan başarıyla düzenlendi";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    async Task getPlanById()
    {
        isBusy = true;

        var result = await plansService.GetPlanByIdAsync(Id);
        if (result.IsSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        await getPlanById();
    }
}
