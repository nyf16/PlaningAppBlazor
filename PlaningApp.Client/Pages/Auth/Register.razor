@page "/auth/register"
@layout AuthLayout
@using PlaningApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
<div class="row">
    <div class="col-12">
        <h2>Yeni hesap oluştur</h2>
        <EditForm Model="model" OnValidSubmit="RegisterUser">
            <RadzenCard>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert alert-info">@message</div>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>İsim</label>
                <RadzenTextBox @bind-Value="model.FirstName"></RadzenTextBox>

                <label>Soyisim</label>
                <RadzenTextBox @bind-Value="model.LastName"></RadzenTextBox>

                <label>E-mail</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Şifre</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <label>Şifreyi Onayla</label>
                <RadzenPassword @bind-Value="model.ConfirmPassword"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Oluştur" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy"></RadzenButton>
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Giriş" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;

    public async Task RegisterUser()
    {
        isBusy = true;
        var result = await authService.RegisterUserAsync(model);
        if (result.IsSuccess)
        {
            message = result.Message;
        }
        else
        {
            message = result.Message;
        }
        isBusy = false;
    }
}
