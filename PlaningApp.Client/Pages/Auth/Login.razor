@page "/auth/login"

@layout AuthLayout
@using PlaningApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
<div class="row">
    <div class="col-12">
        <h2>Hesabınıza giriş yapın</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>

                <ul>
                    @foreach (var item in userInfo)
                    {
                        <li>@item.Key : @item.Value </li>
                    }
                </ul>

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>E-mail</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Şifre</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Giriş" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy"></RadzenButton>
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Oluştur" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy" Click="GoToRegister"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            message = "Planlama Uygulamasına Hoşgeldiniz";
            userInfo = result.UserInfo;
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Errors.FirstOrDefault() ?? result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
